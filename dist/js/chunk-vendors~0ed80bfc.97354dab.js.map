{"version":3,"sources":["webpack:///./node_modules/eventsource-polyfill/dist/browserify-eventsource.js","webpack:///./node_modules/eventsource-polyfill/dist/eventsource.js"],"names":["PolyfillEventSource","__webpack_require__","EventSource","module","exports","window","console","log","global","_eventSourceImportPrefix","evsImportName","url","options","SyntaxError","this","URL","setOptions","evs","setTimeout","poll","prototype","CONNECTING","OPEN","CLOSED","defaultOptions","loggingEnabled","loggingPrefix","interval","bufferSizeLimit","silentTimeout","getArgs","evs_buffer_size_limit","xhrHeaders","Accept","Cache-Control","X-Requested-With","option","defaults","hasOwnProperty","message","readyState","cleanup","cursor","cache","_xhr","XHR","resetNoActivityTimer","e","dispatchEvent","type","data","pollAgain","_pollTimer","clearInterval","_noActivityTimer","abort","close","ondata","request","isReady","hasError","buffer","getBuffer","length","substring","lastMessageIndex","newcursor","toparse","parseStream","isDone","chunk","normalizeToLF","i","j","eventType","datas","line","retry","events","split","parts","trimWhiteSpace","indexOf","replace","parseInt","isNaN","push","lastEventId","event","MessageEvent","join","location","origin","handlers","call","addEventListener","handler","removeEventListener","splice","_noactivityTimer","onerror","onmessage","onopen","urlWithParams","baseURL","params","encodedArgs","key","urlarg","urlize","encodeURIComponent","text","ln2","lastIndexOf","lr2","lrln2","Math","max","str","reTrim","isOldIE","isPolyfill","XDomainRequest","_request","onprogress","_ready","onload","_loaded","_failed","ontimeout","reqGetArgs","defaultArgs","open","send","useXDomainRequest","rv","responseText","XMLHttpRequest","onreadystatechange","status","headers","header","setRequestHeader","bubbles","cancelBubble","cancelable","undefined","responseType"],"mappings":"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","file":"js/chunk-vendors~0ed80bfc.97354dab.js","sourcesContent":["/*\n   * CommonJS module that exports EventSource polyfill version 0.9.6\n   * This module is intended for browser side use\n   * =====================================================================\n   * THIS IS A POLYFILL MODULE, SO IT HAS SIDE EFFECTS\n   * IT AUTOMATICALLY CHECKS IF window OBJECT DEFINES EventSource\n   * AND ADD THE EXPORTED ONE IN CASE IT IS UNDEFINED\n   * =====================================================================\n   * Supported by sc AmvTek srl\n   * :email: devel@amvtek.com\n */\n\n\nvar PolyfillEventSource = require('./eventsource.js').EventSource;\nmodule.exports = PolyfillEventSource;\n\n// Add EventSource to window if it is missing...\nif (window && !window.EventSource){\n    window.EventSource = PolyfillEventSource;\n    if (console){\n\tconsole.log(\"polyfill-eventsource added missing EventSource to window\");\n    }\n}\n","/*\n   * EventSource polyfill version 0.9.6\n   * Supported by sc AmvTek srl\n   * :email: devel@amvtek.com\n */\n;(function (global) {\n\n    if (global.EventSource && !global._eventSourceImportPrefix){\n        return;\n    }\n\n    var evsImportName = (global._eventSourceImportPrefix||'')+\"EventSource\";\n\n    var EventSource = function (url, options) {\n\n        if (!url || typeof url != 'string') {\n            throw new SyntaxError('Not enough arguments');\n        }\n\n        this.URL = url;\n        this.setOptions(options);\n        var evs = this;\n        setTimeout(function(){evs.poll()}, 0);\n    };\n\n    EventSource.prototype = {\n\n        CONNECTING: 0,\n\n        OPEN: 1,\n\n        CLOSED: 2,\n\n        defaultOptions: {\n\n            loggingEnabled: false,\n\n            loggingPrefix: \"eventsource\",\n\n            interval: 500, // milliseconds\n\n            bufferSizeLimit: 256*1024, // bytes\n\n            silentTimeout: 300000, // milliseconds\n\n            getArgs:{\n                'evs_buffer_size_limit': 256*1024\n            },\n\n            xhrHeaders:{\n                'Accept': 'text/event-stream',\n                'Cache-Control': 'no-cache',\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        },\n\n        setOptions: function(options){\n\n            var defaults = this.defaultOptions;\n            var option;\n\n            // set all default options...\n            for (option in defaults){\n\n                if ( defaults.hasOwnProperty(option) ){\n                    this[option] = defaults[option];\n                }\n            }\n\n            // override with what is in options\n            for (option in options){\n\n                if (option in defaults && options.hasOwnProperty(option)){\n                    this[option] = options[option];\n                }\n            }\n\n            // if getArgs option is enabled\n            // ensure evs_buffer_size_limit corresponds to bufferSizeLimit\n            if (this.getArgs && this.bufferSizeLimit) {\n\n                this.getArgs['evs_buffer_size_limit'] = this.bufferSizeLimit;\n            }\n\n            // if console is not available, force loggingEnabled to false\n            if (typeof console === \"undefined\" || typeof console.log === \"undefined\") {\n\n                this.loggingEnabled = false;\n            }\n        },\n\n        log: function(message) {\n\n            if (this.loggingEnabled) {\n\n                console.log(\"[\" + this.loggingPrefix +\"]:\" + message)\n            }\n        },\n\n        poll: function() {\n\n            try {\n\n                if (this.readyState == this.CLOSED) {\n                    return;\n                }\n\n                this.cleanup();\n                this.readyState = this.CONNECTING;\n                this.cursor = 0;\n                this.cache = '';\n                this._xhr = new this.XHR(this);\n                this.resetNoActivityTimer();\n\n            }\n            catch (e) {\n\n                // in an attempt to silence the errors\n                this.log('There were errors inside the pool try-catch');\n                this.dispatchEvent('error', { type: 'error', data: e.message });\n            }\n        },\n\n        pollAgain: function (interval) {\n\n            // schedule poll to be called after interval milliseconds\n            var evs = this;\n            evs.readyState = evs.CONNECTING;\n            evs.dispatchEvent('error', {\n                type: 'error',\n                data: \"Reconnecting \"\n            });\n            this._pollTimer = setTimeout(function(){evs.poll()}, interval||0);\n        },\n\n\n        cleanup: function() {\n\n            this.log('evs cleaning up')\n\n            if (this._pollTimer){\n                clearInterval(this._pollTimer);\n                this._pollTimer = null;\n            }\n\n            if (this._noActivityTimer){\n                clearInterval(this._noActivityTimer);\n                this._noActivityTimer = null;\n            }\n\n            if (this._xhr){\n                this._xhr.abort();\n                this._xhr = null;\n            }\n        },\n\n        resetNoActivityTimer: function(){\n\n            if (this.silentTimeout){\n\n                if (this._noActivityTimer){\n                    clearInterval(this._noActivityTimer);\n                }\n                var evs = this;\n                this._noActivityTimer = setTimeout(\n                        function(){ evs.log('Timeout! silentTImeout:'+evs.silentTimeout); evs.pollAgain(); },\n                        this.silentTimeout\n                        );\n            }\n        },\n\n        close: function () {\n\n            this.readyState = this.CLOSED;\n            this.log('Closing connection. readyState: '+this.readyState);\n            this.cleanup();\n        },\n\n        ondata: function() {\n\n            var request = this._xhr;\n\n            if (request.isReady() && !request.hasError() ) {\n                // reset the timer, as we have activity\n                this.resetNoActivityTimer();\n\n                // move this EventSource to OPEN state...\n                if (this.readyState == this.CONNECTING) {\n                    this.readyState = this.OPEN;\n                    this.dispatchEvent('open', { type: 'open' });\n                }\n\n                var buffer = request.getBuffer();\n\n                if (buffer.length > this.bufferSizeLimit) {\n                    this.log('buffer.length > this.bufferSizeLimit');\n                    this.pollAgain();\n                }\n\n                if (this.cursor == 0 && buffer.length > 0){\n\n                    // skip byte order mark \\uFEFF character if it starts the stream\n                    if (buffer.substring(0,1) == '\\uFEFF'){\n                        this.cursor = 1;\n                    }\n                }\n\n                var lastMessageIndex = this.lastMessageIndex(buffer);\n                if (lastMessageIndex[0] >= this.cursor){\n\n                    var newcursor = lastMessageIndex[1];\n                    var toparse = buffer.substring(this.cursor, newcursor);\n                    this.parseStream(toparse);\n                    this.cursor = newcursor;\n                }\n\n                // if request is finished, reopen the connection\n                if (request.isDone()) {\n                    this.log('request.isDone(). reopening the connection');\n                    this.pollAgain(this.interval);\n                }\n            }\n            else if (this.readyState !== this.CLOSED) {\n\n                this.log('this.readyState !== this.CLOSED');\n                this.pollAgain(this.interval);\n\n                //MV: Unsure why an error was previously dispatched\n            }\n        },\n\n        parseStream: function(chunk) {\n\n            // normalize line separators (\\r\\n,\\r,\\n) to \\n\n            // remove white spaces that may precede \\n\n            chunk = this.cache + this.normalizeToLF(chunk);\n\n            var events = chunk.split('\\n\\n');\n\n            var i, j, eventType, datas, line, retry;\n\n            for (i=0; i < (events.length - 1); i++) {\n\n                eventType = 'message';\n                datas = [];\n                parts = events[i].split('\\n');\n\n                for (j=0; j < parts.length; j++) {\n\n                    line = this.trimWhiteSpace(parts[j]);\n\n                    if (line.indexOf('event') == 0) {\n\n                        eventType = line.replace(/event:?\\s*/, '');\n                    }\n                    else if (line.indexOf('retry') == 0) {\n\n                        retry = parseInt(line.replace(/retry:?\\s*/, ''));\n                        if(!isNaN(retry)) {\n                            this.interval = retry;\n                        }\n                    }\n                    else if (line.indexOf('data') == 0) {\n\n                        datas.push(line.replace(/data:?\\s*/, ''));\n                    }\n                    else if (line.indexOf('id:') == 0) {\n\n                        this.lastEventId = line.replace(/id:?\\s*/, '');\n                    }\n                    else if (line.indexOf('id') == 0) { // this resets the id\n\n                        this.lastEventId = null;\n                    }\n                }\n\n                if (datas.length) {\n                    // dispatch a new event\n                    var event = new MessageEvent(eventType, datas.join('\\n'), window.location.origin, this.lastEventId);\n                    this.dispatchEvent(eventType, event);\n                }\n            }\n\n            this.cache = events[events.length - 1];\n        },\n\n        dispatchEvent: function (type, event) {\n            var handlers = this['_' + type + 'Handlers'];\n\n            if (handlers) {\n\n                for (var i = 0; i < handlers.length; i++) {\n                    handlers[i].call(this, event);\n                }\n            }\n\n            if (this['on' + type]) {\n                this['on' + type].call(this, event);\n            }\n\n        },\n\n        addEventListener: function (type, handler) {\n            if (!this['_' + type + 'Handlers']) {\n                this['_' + type + 'Handlers'] = [];\n            }\n\n            this['_' + type + 'Handlers'].push(handler);\n        },\n\n        removeEventListener: function (type, handler) {\n            var handlers = this['_' + type + 'Handlers'];\n            if (!handlers) {\n                return;\n            }\n            for (var i = handlers.length - 1; i >= 0; --i) {\n                if (handlers[i] === handler) {\n                    handlers.splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        _pollTimer: null,\n\n        _noactivityTimer: null,\n\n        _xhr: null,\n\n        lastEventId: null,\n\n        cache: '',\n\n        cursor: 0,\n\n        onerror: null,\n\n        onmessage: null,\n\n        onopen: null,\n\n        readyState: 0,\n\n        // ===================================================================\n        // helpers functions\n        // those are attached to prototype to ease reuse and testing...\n\n        urlWithParams: function (baseURL, params) {\n\n            var encodedArgs = [];\n\n            if (params){\n\n                var key, urlarg;\n                var urlize = encodeURIComponent;\n\n                for (key in params){\n                    if (params.hasOwnProperty(key)) {\n                        urlarg = urlize(key)+'='+urlize(params[key]);\n                        encodedArgs.push(urlarg);\n                    }\n                }\n            }\n\n            if (encodedArgs.length > 0){\n\n                if (baseURL.indexOf('?') == -1)\n                    return baseURL + '?' + encodedArgs.join('&');\n                return baseURL + '&' + encodedArgs.join('&');\n            }\n            return baseURL;\n        },\n\n        lastMessageIndex: function(text) {\n\n            var ln2 =text.lastIndexOf('\\n\\n');\n            var lr2 = text.lastIndexOf('\\r\\r');\n            var lrln2 = text.lastIndexOf('\\r\\n\\r\\n');\n\n            if (lrln2 > Math.max(ln2, lr2)) {\n                return [lrln2, lrln2+4];\n            }\n            return [Math.max(ln2, lr2), Math.max(ln2, lr2) + 2]\n        },\n\n        trimWhiteSpace: function(str) {\n            // to remove whitespaces left and right of string\n\n            var reTrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g;\n            return str.replace(reTrim, '');\n        },\n\n        normalizeToLF: function(str) {\n\n            // replace \\r and \\r\\n with \\n\n            return str.replace(/\\r\\n|\\r/g, '\\n');\n        }\n\n    };\n\n    if (!isOldIE()){\n\n        EventSource.isPolyfill = \"XHR\";\n\n        // EventSource will send request using XMLHttpRequest\n        EventSource.prototype.XHR = function(evs) {\n\n            request = new XMLHttpRequest();\n            this._request = request;\n            evs._xhr = this;\n\n            // set handlers\n            request.onreadystatechange = function(){\n                if (request.readyState > 1 && evs.readyState != evs.CLOSED) {\n                    if (request.status == 200 || (request.status>=300 && request.status<400)){\n                        evs.ondata();\n                    }\n                    else {\n                        request._failed = true;\n                        evs.readyState = evs.CLOSED;\n                        evs.dispatchEvent('error', {\n                            type: 'error',\n                            data: \"The server responded with \"+request.status\n                        });\n                        evs.close();\n                    }\n                }\n            };\n\n            request.onprogress = function () {\n            };\n\n            request.open('GET', evs.urlWithParams(evs.URL, evs.getArgs), true);\n\n            var headers = evs.xhrHeaders; // maybe null\n            for (var header in headers) {\n                if (headers.hasOwnProperty(header)){\n                    request.setRequestHeader(header, headers[header]);\n                }\n            }\n            if (evs.lastEventId) {\n                request.setRequestHeader('Last-Event-Id', evs.lastEventId);\n            }\n\n            request.send();\n        };\n\n        EventSource.prototype.XHR.prototype = {\n\n            useXDomainRequest: false,\n\n            _request: null,\n\n            _failed: false, // true if we have had errors...\n\n            isReady: function() {\n\n\n                return this._request.readyState >= 2;\n            },\n\n            isDone: function() {\n\n                return (this._request.readyState == 4);\n            },\n\n            hasError: function() {\n\n                return (this._failed || (this._request.status >= 400));\n            },\n\n            getBuffer: function() {\n\n                var rv = '';\n                try {\n                    rv = this._request.responseText || '';\n                }\n                catch (e){}\n                return rv;\n            },\n\n            abort: function() {\n\n                if ( this._request ) {\n                    this._request.abort();\n                }\n            }\n        };\n    }\n    else {\n\n\tEventSource.isPolyfill = \"IE_8-9\";\n\n        // patch EventSource defaultOptions\n        var defaults = EventSource.prototype.defaultOptions;\n        defaults.xhrHeaders = null; // no headers will be sent\n        defaults.getArgs['evs_preamble'] = 2048 + 8;\n\n        // EventSource will send request using Internet Explorer XDomainRequest\n        EventSource.prototype.XHR = function(evs) {\n\n            request = new XDomainRequest();\n            this._request = request;\n\n            // set handlers\n            request.onprogress = function(){\n                request._ready = true;\n                evs.ondata();\n            };\n\n            request.onload = function(){\n                this._loaded = true;\n                evs.ondata();\n            };\n\n            request.onerror = function(){\n                this._failed = true;\n                evs.readyState = evs.CLOSED;\n                evs.dispatchEvent('error', {\n                    type: 'error',\n                    data: \"XDomainRequest error\"\n                });\n            };\n\n            request.ontimeout = function(){\n                this._failed = true;\n                evs.readyState = evs.CLOSED;\n                evs.dispatchEvent('error', {\n                    type: 'error',\n                    data: \"XDomainRequest timed out\"\n                });\n            };\n\n            // XDomainRequest does not allow setting custom headers\n            // If EventSource has enabled the use of GET arguments\n            // we add parameters to URL so that server can adapt the stream...\n            var reqGetArgs = {};\n            if (evs.getArgs) {\n\n                // copy evs.getArgs in reqGetArgs\n                var defaultArgs = evs.getArgs;\n                    for (var key in defaultArgs) {\n                        if (defaultArgs.hasOwnProperty(key)){\n                            reqGetArgs[key] = defaultArgs[key];\n                        }\n                    }\n                if (evs.lastEventId){\n                    reqGetArgs['evs_last_event_id'] = evs.lastEventId;\n                }\n            }\n            // send the request\n\n            request.open('GET', evs.urlWithParams(evs.URL,reqGetArgs));\n            request.send();\n        };\n\n        EventSource.prototype.XHR.prototype = {\n\n            useXDomainRequest: true,\n\n            _request: null,\n\n            _ready: false, // true when progress events are dispatched\n\n            _loaded: false, // true when request has been loaded\n\n            _failed: false, // true if when request is in error\n\n            isReady: function() {\n\n                return this._request._ready;\n            },\n\n            isDone: function() {\n\n                return this._request._loaded;\n            },\n\n            hasError: function() {\n\n                return this._request._failed;\n            },\n\n            getBuffer: function() {\n\n                var rv = '';\n                try {\n                    rv = this._request.responseText || '';\n                }\n                catch (e){}\n                return rv;\n            },\n\n            abort: function() {\n\n                if ( this._request){\n                    this._request.abort();\n                }\n            }\n        };\n    }\n\n    function MessageEvent(type, data, origin, lastEventId) {\n\n        this.bubbles = false;\n        this.cancelBubble = false;\n        this.cancelable = false;\n        this.data = data || null;\n        this.origin = origin || '';\n        this.lastEventId = lastEventId || '';\n        this.type = type || 'message';\n    }\n\n    function isOldIE () {\n\n        //return true if we are in IE8 or IE9\n        return (window.XDomainRequest && (window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined)) ? true : false;\n    }\n\n    global[evsImportName] = EventSource;\n})(this);\n"],"sourceRoot":""}